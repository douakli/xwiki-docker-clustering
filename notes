DBs:
PostgreSQL
MySQL
MariaDB
Oracle

Servlet engine:
Tomcat
Jetty

Reverse proxy:
Apache
Nginx


First try: Downlaod the war in $CATALINA_HOME/webapps. Letting tomcat unpack it.
Had to look at the log files in the container and see that we had a `java.lang.NoClassDefFoundError: javax/servlet/ServletContextListener` error.
By googling the issue, we determined that the tomcat version we used was not compatible with XWiki.
We will now follow XWiki's Tomcat documentation: https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Installation/InstallationWAR/InstallationTomcat/

For XWiki to run, it needs to be configured.
Two notable things: https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Configuration/#HConfiguringDirectories => Need to set a permanent storage (docker volume)
And configuring the database: https://www.xwiki.org/xwiki/bin/view/Documentation/AdminGuide/Installation/InstallationWAR/InstallationMariaDB/ is done through a file.
This is usually done through environment variables in docker images though.

One thing, the xwiki.properties configuration file is an important configuration file. We need to provide some defaults, but ultimately, the administrator might
want to change things in there. The correct approach would be to provide a default here and feed it into the container at runtime. That way, the user can make changes
to it.

Because we need the project to work out of the box, and there are many configuration files, we will initaliaze the project with good default, and move it into a use controlled
volume, where they can adjust details of their own.

We also need to inject the jdbc connector. Let's try to see if we can do this through a symlink.


It seems like the official solr docker image is broken with volumes by default.
we get the following error `Cannot write to /var/solr as 8983:8983` when /var/solr is mounted as a docker volume.
This is because the Docker engine creates the volume with root ownership by default. However, the solr docker image runs with a specific user.
We need to wrap the entrypoint and change the permissions of the /var/solr directory before doing anything.

The entrypoint runs as "solr" user of course. We decided to write a script to change the permissions of the directory, and run it with a setuid.
However, a script's setuid isn't effective. (see http://www.faqs.org/faqs/unix-faq/faq/part4/section-7.html)

We managed to get solr to run externally and enabled clustering.
Now we need to run multiple tomcat instances, with a way to differentiate them.
Also, part of the permanent storage is expected to be shared. Part of the permanent storage is expected to be local only to avoid conflicts.
To my understanding, only the data/store directory is to be shared.
